function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

import { Component, createElement } from 'react';
import PropTypes from 'prop-types';
import hoistStatics from 'hoist-non-react-statics';
import { STORE_KEY } from '../constants';
import shallowEqual from '../utils/shallowEqual';
export default (function (mapStateToPropsFn, mapDispatchToPropsFn, mapCommitToPropsFn, mapGetterToPropsFn) {
  return function (WrappedComponent) {
    var _PresentationalCompon2;

    var PresentationalComponent =
    /*#__PURE__*/
    function (_Component) {
      _inherits(PresentationalComponent, _Component);

      function PresentationalComponent(props, context) {
        var _this;

        _classCallCheck(this, PresentationalComponent);

        _this = _possibleConstructorReturn(this, _getPrototypeOf(PresentationalComponent).call(this, props, context));
        _this.store = props[STORE_KEY] || context[STORE_KEY];
        _this.mappedState = mapStateToPropsFn && mapStateToPropsFn(_this.store.state, props);
        _this.mappedGetters = mapGetterToPropsFn && mapGetterToPropsFn(_this.store.getters, props); // will be used to unsubscribe from store changes when the component unmounts

        _this.unsubscribeFn = null;
        _this.state = Object.assign({}, _this.mappedState, mapDispatchToPropsFn && mapDispatchToPropsFn(_this.store.dispatch, props), mapCommitToPropsFn && mapCommitToPropsFn(_this.store.commit, props), _this.mappedGetters);

        if (_this.mappedState) {
          _this.unsubscribeFn = _this.store.subscribe(function (mutation, state) {
            var newState = {}; // update state from store state

            var newMappedState = mapStateToPropsFn(state, _this.props);

            if (!shallowEqual(_this.mappedState, newMappedState)) {
              _this.mappedState = newMappedState;
              newState = Object.assign({}, newState, _this.mappedState);
            } // update state from store getters, if any


            if (_this.mappedGetters) {
              var newMappedGetters = mapGetterToPropsFn(_this.store.getters, _this.props);

              if (!shallowEqual(_this.mappedGetters, newMappedGetters)) {
                _this.mappedGetters = newMappedGetters;
                newState = Object.assign({}, newState, _this.mappedGetters);
              }
            }

            if (Object.keys(newState).length) {
              _this.setState(newState);
            }
          });
        }

        return _this;
      }

      _createClass(PresentationalComponent, [{
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          if (typeof this.unsubscribeFn === 'function') {
            this.unsubscribeFn();
          }
        }
      }, {
        key: "render",
        value: function render() {
          return createElement(WrappedComponent, Object.assign({}, this.props, this.state), this.props.children // eslint-disable-line react/destructuring-assignment
          );
        }
      }]);

      return PresentationalComponent;
    }(Component);

    PresentationalComponent.WrappedComponent = WrappedComponent;
    PresentationalComponent.contextTypes = _defineProperty({}, STORE_KEY, PropTypes.object);
    PresentationalComponent.propTypes = (_PresentationalCompon2 = {}, _defineProperty(_PresentationalCompon2, STORE_KEY, PropTypes.object), _defineProperty(_PresentationalCompon2, "children", PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node])), _PresentationalCompon2);
    PresentationalComponent.displayName = WrappedComponent.displayName || WrappedComponent.name || 'Component';
    return hoistStatics(PresentationalComponent, WrappedComponent);
  };
});